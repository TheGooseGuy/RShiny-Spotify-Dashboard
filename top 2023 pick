#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/

library(shiny)
library(spotifyr)
library(ggplot2)
library(dplyr)
library(lubridate)
library(shinythemes)
library(tidyverse)
# Load the reference data set and preprocess it
data_reference = read_csv("C:/Users/Administrator/Desktop/spotify-2023.csv")
data_reference$streams = as.numeric(data_reference$streams)
data_reference = data_reference %>% rename(artist_name = 'artist(s)_name')

# Get the top 10 streams
top10_streams_list = data_reference %>% arrange(desc(streams)) %>% 
  slice_head(n = 10) %>% select(track_name,artist_name,streams)


# Get the top 10 artists by total streams
top10_total_artists_stream = data_reference %>% group_by(artist_name) %>% 
  summarise(total_streams = sum(streams,na.rm = TRUE),track_num = n()) %>% 
  arrange(desc(total_streams)) %>% slice_head(n = 10)

# Get the top 10 Spotify playlists
top10_spotify_playlists = data_reference %>% arrange(desc(in_spotify_playlists)) %>% 
  slice_head(n = 10) %>% select(track_name,artist_name,in_spotify_playlists)

# Gee the top 10 artists by total palylists
top10_total_artists_playlists = data_reference %>% group_by(artist_name) %>% 
  summarise(total_playlists = sum(in_spotify_playlists,na.rm = TRUE),track_num = n()) %>% 
  arrange(desc(total_playlists)) %>% slice_head(n = 10)

# Check for valid values for min and max
playlist_min = ifelse(is.na(min(data_reference$in_spotify_playlists, na.rm = TRUE)),
                       0, min(data_reference$in_spotify_playlists, na.rm = TRUE))
playlist_max = ifelse(is.na(max(data_reference$in_spotify_playlists, na.rm = TRUE)),
                       1, max(data_reference$in_spotify_playlists, na.rm = TRUE))

stream_min = ifelse(is.na(min(data_reference$streams, na.rm = TRUE)),
                     0, min(data_reference$streams, na.rm = TRUE))
stream_max = ifelse(is.na(max(data_reference$streams, na.rm = TRUE)),
                     1, max(data_reference$streams, na.rm = TRUE))


tabs_ui = tabsetPanel(
  tags$style(HTML("
    body {
      background-color: #100000; /* Dark background */
      color: #FFFFFF; /* White text */
    }
    .nav-tabs > li > a, .nav-tabs > li > a:focus, .nav-tabs > li > a:hover {
      color: #FFFFFF; /* White text for tab titles */
    }
    .nav-tabs > li.active > a, .nav-tabs > li.active > a:focus, .nav-tabs > li.active > a:hover {
      color: #FFFFFF; /* White text for active tab title */
      background-color: #444444; /* Optional: dark background for active tab */
    }
  ")),
  tabPanel("Metrics Exploration", 
           textOutput("metricDescription"),
           plotOutput("metricPlot"),
           tableOutput("filteredSongs")),
  tabPanel("Summary", textOutput("summary")),
  tabPanel("Genres", plotOutput("genrePlot")),
  tabPanel("Top Tracks", tableOutput("topTracks")),
  tabPanel("Listening Trends",
           plotOutput("listeningTrendsPlot"),
           p("This chart shows how your listening habits have changed over time."))
)


main_ui <- navbarPage(
  title = tags$img(src = "spotify_logo.png", height = "30px"),  # Add Spotify logo
  theme = shinythemes::shinytheme("cosmo"),  # Apply a dark theme
  tags$style(HTML("
    body {
      background-color: #100000; /* Dark gray background */
      color: #FFFFFF; /* White text */
    }
    .sidebar {
      background-color: #100000; /* Dark blue-gray background */
      color: #ffffff; /* White text */
    }
    /* Spotify Green checkbox background when checked */
    .form-check-input:checked {
      background-color: #1DB954 !important; /* Spotify Green */
      border-color: #1DB954 !important;
    }
    /* Focus state when clicking on the checkbox */
    .form-check-input:focus {
      border-color: #1DB954 !important; /* Focus border color */
    }
    /* General checkbox styles */
    .form-check-input {
      color: #1DB954 !important; /* Checkbox border */
      background-color: #1DB954; /* Unchecked background */
    }
    /* Label for checkboxes - set color to white */
    .form-check-label {
      color: #FFFFFF !important;
    }
    /* Custom checkbox styles for when the user hovers over the checkbox */
    .form-check-input:hover {
      background-color: #1DB954 !important; /* Hover state */
      border-color: #1DB954 !important;
    }
")),
  tabPanel("Dashboard",
           icon = icon("fa-solid fa-user"),
           sidebarLayout(
             sidebarPanel(
               class = "sidebar",
               textInput("token", "Enter your Spotify Token:", ""),
               actionButton("analyze", "Lock In"),
               hr(),
               h3("Analysis Options"),
               checkboxInput("show_genres", "Show Genre Analysis", TRUE),
               checkboxInput("show_tracks", "Show Most Listened Tracks", TRUE),
               checkboxInput("show_time", "Show Listening Time Trends", TRUE),
               selectInput("metric", "Choose a Metric:", 
                           choices = c("Speechiness", "Danceability", "Energy", "Valence")),
               sliderInput("metricRange", "Select Metric Range:", 
                           min = 0, max = 1, value = c(0.4, 0.6)),
               actionButton("filter", "Filter Songs")
             ),
             mainPanel(tabs_ui)  # Use `tabs_ui` here
           )
  ),
  tabPanel("Top Pick 2023",
           icon = icon("arrow-down-wide-short"),
           tabsetPanel(
             tabPanel("Introduction",
                   fluidRow(
                     column(width = 8,
                            h3("About Dataset"),
                            uiOutput("description")),
                     column(width = 4,
                            h3("Key features"),
                            uiOutput("features"))
                   )   
                       
             ),
             tabPanel("Top 10 Streams",
                   fluidRow(
                     column(width = 6,
                            h3("2023 Top 10 Tracks by Streams"),
                            uiOutput("topstreamsummary", style = "margin-bottom: 60px;")),
                     column(width = 6,
                            h3("2023 Top 10 Artists by total Streams"),
                            uiOutput("topartiststreamsummary", style = "margin-bottom: 60px;"))),
                   
                   fluidRow(
                     column(width = 6,
                     plotOutput("topstreamplot",height = "400px")),
                     column(width = 6,
                     plotOutput("totalstreamplot",height = "400px")))),
           
             tabPanel("Top 10 playlists",
                      fluidRow(
                        column(width = 6,
                               h3("2023 Top 10 Tracks by Playlist Count"),
                               uiOutput("topplaylistsummary", style = "margin-bottom: 60px;")
                        ),
                        column(width = 6,
                               h3("2023 Top 10 Artists by Total Playlists"),
                               uiOutput("topartistplaylistsummary", style = "margin-bottom: 60px;")
                        )
                      ),
                      fluidRow(
                        column(width = 6, plotOutput("topplaylistplot", height = "400px")),
                        column(width = 6, plotOutput("totalplaylistplot", height = "400px"))
                      )),
             tabPanel("Spotify Tracks Dynamic Analysis",
                      sidebarLayout(
                        sidebarPanel(
                          # Dropdown for selecting track or artist
                          selectInput("selection", 
                                      "Choose what to analyze:", 
                                      choices = c("Track Name", "Artist Name")),
                          
                          # Dynamic UI for filtering based on the choice
                          uiOutput("dynamic_filter"),
                          
                          # Slider input for filtering by playlists
                          sliderInput("playlist_filter", 
                                      "Number of Spotify Playlists:", 
                                      min = playlist_min, 
                                      max = playlist_max, 
                                      value = c(playlist_min, playlist_max)),
                          
                          # Slider input for filtering by streams
                          sliderInput("stream_filter", 
                                      "Number of Streams:", 
                                      min = stream_min, 
                                      max = stream_max, 
                                      value = c(stream_min, stream_max))
                        ),
                        
                        mainPanel(
                          # Dynamic plot
                          plotOutput("spotify_plot", height = "400px"),
                          
                          # Full-width row for the track table in two columns
                          conditionalPanel(
                            condition = "input.selection == 'Artist Name'",  # Show tables only for Artist Name
                            fluidRow(
                              column(6, 
                                     h4("Artist Detail", style = "text-align: center;"),
                                     tableOutput("track_table_left")),
                              column(6, 
                                     h4("Artist Detail", style = "text-align: center;"),
                                     tableOutput("track_table_right"))
                            )
                          )
                        )
                      )
                      ))),
  tabPanel("Listening Trends", 
           icon = icon("arrow-trend-up"),
           plotOutput("listeningTrendsPlot",height = "400px", width = "50%")),
  tabPanel("Playlist Generate",
           icon = icon("list"))
)


ui <- fluidPage(
  main_ui
)

server <- function(input, output, session) {
  user_data <- reactiveVal()
  observeEvent(input$analyze, {
    req(input$token)
    
    access_token <- input$token
    
    # Fetch top tracks
    tracks <- get_my_top(type = "tracks", time_range = "long_term", limit = 50, authorization = access_token)
    artists <- get_my_top(type = "artists", time_range = "long_term", limit = 50, authorization = access_token)
    
    # Process data
    genres <- unlist(artists$genres)
    genre_count <- as.data.frame(table(genres))
    genre_count <- genre_count[order(-genre_count$Freq), ]
    
    total_time <- sum(tracks$duration_ms) / (1000 * 60)  # Convert ms to minutes
    
    # Store results
    user_data(list(
      tracks = tracks,
      artists = artists,
      genres = genre_count,
      total_time = total_time
    ))
  })
  
  observeEvent(input$analyze, {
    req(input$token)
    access_token <- input$token
    
    # Fetch recently played tracks or user's top tracks
    tracks <- get_my_top(type = "tracks", time_range = "long_term", limit = 50, authorization = access_token)
    
    # Add a timestamp approximation
    tracks$played_at <- tracks$added_at  # Replace 'added_at' with actual timestamps if available
    
    # Store data for reactive use
    user_data(tracks)
  })
  trends_data <- reactive({
    req(user_data())
    
    user_data() %>%
      mutate(month = floor_date(as.Date(played_at), "month")) %>%  # Group by month
      group_by(month) %>%
      summarize(
        total_songs = n(),                           # Total songs listened
        total_duration = sum(duration_ms, na.rm = TRUE) / 60000   # Total duration in minutes
      )
  })
  output$listeningTrendsPlot <- renderPlot({
    req(trends_data())
    
    ggplot(trends_data(), aes(x = month)) +
      geom_line(aes(y = total_songs), color = "blue", size = 1) +  # Line for total songs
      geom_bar(aes(y = total_duration), stat = "identity", fill = "lightblue", alpha = 0.5) +  # Bars for duration
      labs(
        title = "User's Listening Trends Over Time",
        x = "Month",
        y = "Total Songs / Listening Time (min)"
      ) +
      theme_minimal()
  })
  
  # Output Summary
  output$summary <- renderText({
    data <- user_data()
    req(data)
    paste0("Total time spent listening: ", round(data$total_time, 2), " minutes")
  })
  
  # Genre Analysis Plot
  output$genrePlot <- renderPlot({
    req(input$show_genres)
    data <- user_data()
    req(data)
    ggplot(data$genres, aes(x = reorder(genres, Freq), y = Freq)) +
      geom_bar(stat = "identity", fill = "steelblue") +
      coord_flip() +
      labs(title = "Top Genres", x = "Genres", y = "Count")
  })
  
  # Top Tracks Table
  output$topTracks <- renderTable({
    req(input$show_tracks)
    data <- user_data()
    req(data)
    data$tracks %>%
      select(name, artists = artists.name, popularity) %>%
      arrange(-popularity) %>%
      head(10)
  })
  
  # Listening Time Trends (Placeholder for now)
  output$timePlot <- renderPlot({
    req(input$show_time)
    ggplot() +
      geom_line() +
      labs(title = "Listening Time Trends", x = "Date", y = "Time Spent")
  })

  # Top Pick 2023 output
  # Introduction 
  output$description = renderUI({
    tags$div(
      tags$h3("Description:"),
      tags$p("This dataset contains a comprehensive list of the most famous songs of 2023 as listed on Spotify. The dataset offers a wealth of features beyond what is typically available in similar datasets. It provides insights into each song's attributes, popularity, and presence on various music platforms.",style = "font-size: 18px;"),
      tags$p("The dataset includes information such as ",style = "font-size: 18px;", 
             tags$strong("track name, artist(s) name, release date, Spotify playlists and charts, streaming statistics, Apple Music presence, Deezer presence, Shazam charts, and various audio features.",style = "font-size: 18px;")),
      tags$p(
        "Source: ", 
        tags$a(href = "https://www.kaggle.com/datasets/nelgiriyewithana/top-spotify-songs-2023", target = "_blank", "Spotify Dataset Source"),
        style = "margin-top: 200px; font-size: 14px; color: #555;"
      ),
      style = "background-color:#100000 ;color:#ffffff padding: 15px; border-radius: 5px;"
    )
  })
  output$features = renderUI({
    tags$div(
      tags$ul(
        tags$li(tags$strong("track_name:",style = "font-size: 16px;"), " Name of the song",style = "font-size: 16px;"),
        tags$li(tags$strong("artist(s)_name:",style = "font-size: 16px;"), " Name of the artist(s) of the song",style = "font-size: 16px;"),
        tags$li(tags$strong("artist_count:",style = "font-size: 16px;"), " Number of artists contributing to the song",style = "font-size: 16px;"),
        tags$li(tags$strong("released_year:",style = "font-size: 16px;"), " Year when the song was released",style = "font-size: 16px;"),
        tags$li(tags$strong("released_month:",style = "font-size: 16px;"), " Month when the song was released",style = "font-size: 16px;"),
        tags$li(tags$strong("released_day:",style = "font-size: 16px;"), " Day of the month when the song was released",style = "font-size: 16px;"),
        tags$li(tags$strong("in_spotify_playlists:",style = "font-size: 16px;"), " Number of Spotify playlists the song is included in",style = "font-size: 16px;"),
        tags$li(tags$strong("in_spotify_charts:",style = "font-size: 16px;"), " Presence and rank of the song on Spotify charts",style = "font-size: 16px;"),
        tags$li(tags$strong("streams:",style = "font-size: 16px;"), " Total number of streams on Spotify",style = "font-size: 16px;"),
        tags$li(tags$strong("in_apple_playlists:",style = "font-size: 16px;"), " Number of Apple Music playlists the song is included in",style = "font-size: 16px;"),
        tags$li(tags$strong("in_apple_charts:",style = "font-size: 16px;"), " Presence and rank of the song on Apple Music charts",style = "font-size: 16px;"),
        tags$li(tags$strong("in_deezer_playlists:",style = "font-size: 16px;"), " Number of Deezer playlists the song is included in",style = "font-size: 16px;"),
        tags$li(tags$strong("in_deezer_charts:",style = "font-size: 16px;"), " Presence and rank of the song on Deezer charts",style = "font-size: 16px;"),
        tags$li(tags$strong("in_shazam_charts:",style = "font-size: 16px;"), " Presence and rank of the song on Shazam charts",style = "font-size: 16px;")
      ),
      style = "background-color: #100000 ; color:#ffffff padding: 15px; border-radius: 5px;"
    )
  })
  
  
  
  
  
  
  # Render the top 10 tracks by stream summary
  output$topstreamsummary = renderUI({
    top10_streams = HTML(paste0(lapply(1:nrow(top10_streams_list),function(i){
      sprintf("%d. <strong>%s</strong> by %s with %s streams<br>",
              i,
              top10_streams_list$track_name[i],
              top10_streams_list$artist_name[i],
              format(as.numeric(top10_streams_list$streams[i])))
    }),
    collapse = ""))
  })
  # Render the top 10 artists by total streams summary
  output$topartiststreamsummary = renderUI({
    top10_artists_streams = HTML(paste0(
      lapply(1:nrow(top10_total_artists_stream), function(i) {
        sprintf(
          "%d. <strong>%s</strong> with %d tracks and %s streams<br>",
          i,
          top10_total_artists_stream$artist_name[i],
          top10_total_artists_stream$track_num[i],
          format(top10_total_artists_stream$total_streams[i])
        )
      }),
      collapse = ""
    ))
  })
  # Plot for top 10 tracks by stream
  output$topstreamplot = renderPlot({
    ggplot(top10_streams_list,aes(x = reorder(track_name,streams),y = streams,fill = streams))+
      geom_bar(stat = "identity") +
      coord_flip() +
      labs(
        title = "Top 10 Tracks by Streams with Artists",
        x = "Track Name",
        y = "Streams",
      ) +
      geom_text(
        aes(label = artist_name),  # Use artist name as label
        vjust = 0.5,
        hjust = 1.1,
        size = 4,
        face = "bold",
        color = "#100000"
      ) +
      scale_y_continuous(labels = scales::comma_format(scale=0.001,suffix = "k")) +
      scale_fill_gradient(low = "lightgreen", high = "#1DB954")+
      theme_minimal() +
      theme(
        plot.title = element_text(hjust = 0.5,size = 14,color = "white",face = "bold"),
        axis.text = element_text(size = 10,color = "white",face = "bold"),
        axis.title = element_text(size = 10,color = "white",face = "bold"),
        plot.margin = unit(c(1, 1, 1, 0), "cm"),
        plot.background = element_rect(fill = "#100000", color = NA),
        panel.background = element_rect(fill = "#100000", color = NA),
        panel.grid.major = element_line(color = "gray40"),
        panel.grid.minor = element_line(color = "gray30"),
        legend.background = element_rect(fill = "#100000"),
        legend.position = "None",
        axis.text.x = element_text(angle = 45, hjust = 1)
      )
  })
  # Plot for top 10 artists by total streams
  output$totalstreamplot = renderPlot({
    ggplot(top10_total_artists_stream,aes(x = reorder(artist_name,total_streams),y = total_streams,fill = total_streams))+
      geom_bar(stat = "identity")+
      geom_text(
        aes(label = paste0("Tracks number: ", track_num)),
        vjust = 0.5,
        hjust = 1.1,
        size = 4,
        face = "bold",
        color = "#100000")+
      coord_flip()+
      labs(
        title = "Top 10 Artists by Total Streams with Track number",
        x = "Artist",
        y = "Total Streams"
      )+
      scale_y_continuous(labels = scales::comma_format(scale=0.001,suffix = "k")) +
      scale_fill_gradient(low = "lightgreen", high = "#1DB954")+
      theme_minimal() +
      theme(
        plot.title = element_text(hjust = 0.5,size = 14,color = "white",face = "bold"),
        axis.text = element_text(size = 10,color = "white",face = "bold"),
        axis.title = element_text(size = 10,color = "white",face = "bold"),
        plot.margin = unit(c(1, 1, 1, 0), "cm"),
        plot.background = element_rect(fill = "#100000", color = NA),
        panel.background = element_rect(fill = "#100000", color = NA),
        panel.grid.major = element_line(color = "gray40"),
        panel.grid.minor = element_line(color = "gray30"),
        legend.background = element_rect(fill = "#100000"),
        legend.position = "None",
        axis.text.x = element_text(angle = 45, hjust = 1)
      )
  })
  
  # Render the top 10 tracks by playlist summary
  output$topplaylistsummary = renderUI({
    HTML(paste0(
      lapply(1:nrow(top10_spotify_playlists), function(i) {
        sprintf(
          "%d. <strong>%s</strong> by %s with %s playlists<br>",
          i,
          top10_spotify_playlists$track_name[i],
          top10_spotify_playlists$artist_name[i],
          format(as.numeric(top10_spotify_playlists$in_spotify_playlists[i]), big.mark = ",")
        )
      }),
      collapse = ""
    ))
  })
  
  # Render the top 10 artists by total playlists summary
  output$topartistplaylistsummary = renderUI({
    HTML(paste0(
      lapply(1:nrow(top10_total_artists_playlists), function(i) {
        sprintf(
          "%d. <strong>%s</strong> with %d tracks and %s playlists<br>",
          i,
          top10_total_artists_playlists$artist_name[i],
          top10_total_artists_playlists$track_num[i],
          format(top10_total_artists_playlists$total_playlists[i], big.mark = ",")
        )
      }),
      collapse = ""
    ))
  })
  
  # Plot for Top 10 Tracks by Playlist Count
  output$topplaylistplot = renderPlot({
    ggplot(top10_spotify_playlists, aes(x = reorder(track_name, in_spotify_playlists), y = in_spotify_playlists, fill = in_spotify_playlists)) +
      geom_bar(stat = "identity") +
      coord_flip() +
      labs(
        title = "Top 10 Tracks by Playlist Count with Artists",
        x = "Track Name",
        y = "Playlist Count"
      ) +
      geom_text(
        aes(label = artist_name),  # Use artist name as label
        vjust = 0.5,
        hjust = 1.1,
        size = 4,
        face = "bold",
        color = "#100000"
      ) +
      scale_y_continuous(labels = scales::comma_format(scale = 0.001, suffix = "k")) +
      scale_fill_gradient(low = "lightgreen", high = "#1DB954") +
      theme_minimal() +
      theme(
        plot.title = element_text(hjust = 0.5, size = 14, color = "white", face = "bold"),
        axis.text = element_text(size = 10, color = "white", face = "bold"),
        axis.title = element_text(size = 10, color = "white", face = "bold"),
        plot.margin = unit(c(1, 1, 1, 0), "cm"),
        plot.background = element_rect(fill = "#100000", color = NA),
        panel.background = element_rect(fill = "#100000", color = NA),
        panel.grid.major = element_line(color = "gray40"),
        panel.grid.minor = element_line(color = "gray30"),
        legend.background = element_rect(fill = "#100000"),
        legend.position = "None",
        axis.text.x = element_text(angle = 45, hjust = 1)
      )
  })
  
  # Plot for Top 10 Artists by Total Playlist Count
  output$totalplaylistplot = renderPlot({
    ggplot(top10_total_artists_playlists, aes(x = reorder(artist_name, total_playlists), y = total_playlists, fill = total_playlists)) +
      geom_bar(stat = "identity") +
      geom_text(
        aes(label = paste0("Tracks number: ", track_num)),
        vjust = 0.5,
        hjust = 1.1,
        size = 4,
        face = "bold",
        color = "#100000"
      ) +
      coord_flip() +
      labs(
        title = "Top 10 Artists by Total Playlists with Track Number",
        x = "Artist",
        y = "Total Playlists"
      ) +
      scale_y_continuous(labels = scales::comma_format(scale = 0.001, suffix = "k")) +
      scale_fill_gradient(low = "lightgreen", high = "#1DB954") +
      theme_minimal() +
      theme(
        plot.title = element_text(hjust = 0.5, size = 14, color = "white", face = "bold"),
        axis.text = element_text(size = 10, color = "white", face = "bold"),
        axis.title = element_text(size = 10, color = "white", face = "bold"),
        plot.margin = unit(c(1, 1, 1, 0), "cm"),
        plot.background = element_rect(fill = "#100000", color = NA),
        panel.background = element_rect(fill = "#100000", color = NA),
        panel.grid.major = element_line(color = "gray40"),
        panel.grid.minor = element_line(color = "gray30"),
        legend.background = element_rect(fill = "#100000"),
        legend.position = "None",
        axis.text.x = element_text(angle = 45, hjust = 1)
      )
  })
  
  # Create dynamic filter UI based on the selection
  output$dynamic_filter = renderUI({
    if (input$selection == "Track Name") {
      selectInput("track_artist_filter", 
                  "Select Track Name:", 
                  choices = unique(data_reference$track_name))
    } else {
      artist_ordered = data_reference %>%
        group_by(artist_name) %>%
        summarize(total_streams = sum(streams, na.rm = TRUE)) %>%
        arrange(desc(total_streams))
      
      selectInput("track_artist_filter", 
                  "Select Artist Name:", 
                  choices = unique(artist_ordered))
    }
  })
  
  # Filter the data re-actively
  filtered_data = reactive({
    if (input$selection == "Track Name") {
      data_reference %>%
        filter(track_name == input$track_artist_filter &
                 in_spotify_playlists >= input$playlist_filter[1] &
                 in_spotify_playlists <= input$playlist_filter[2] &
                 streams >= input$stream_filter[1] &
                 streams <= input$stream_filter[2])
    } else {
      data_reference %>%
        filter(artist_name == input$track_artist_filter &
                 in_spotify_playlists >= input$playlist_filter[1] &
                 in_spotify_playlists <= input$playlist_filter[2] &
                 streams >= input$stream_filter[1] &
                 streams <= input$stream_filter[2])
    }
  })
  
  # Render the plot
  output$spotify_plot = renderPlot({
    data = filtered_data()
    ggplot(data, aes(x = in_spotify_playlists, y = streams, color = streams)) +
      geom_point(size = 3, alpha = 0.7) +
      scale_color_gradient(low = "lightgreen", high = "#1DB954") +  # Use color aesthetic
      labs(
        title = "Spotify Playlists vs Streams",
        x = "Number of Spotify Playlists",
        y = "Number of Streams"
      ) +
      theme_minimal() +
      theme(
        plot.title = element_text(hjust = 0.5,size = 15,color = "white",face = "bold"),
        axis.text = element_text(size = 13,color = "white",face = "bold"),
        axis.title = element_text(size = 13,color = "white",face = "bold"),
        plot.margin = unit(c(1, 1, 1, 0), "cm"),
        plot.background = element_rect(fill = "#100000", color = NA),
        panel.background = element_rect(fill = "#100000", color = NA),
        panel.grid.major = element_line(color = "gray40"),
        panel.grid.minor = element_line(color = "gray30"),
        legend.background = element_rect(fill = "#100000"),
        legend.position = "None",
        axis.text.x = element_text(angle = 45, hjust = 1)
      ) +
      scale_y_continuous(labels = scales::comma_format(scale = 0.001, suffix = "k"))  # Format y-axis
  })
  
  # Split the track list into two parts
  split_tracks <- reactive({
    if (input$selection == "Artist Name") {
      tracks = data_reference %>%
        filter(artist_name == input$track_artist_filter) %>%
        select(track_name, streams, in_spotify_playlists) %>%
        arrange(desc(streams))
      mid_point = ceiling(nrow(tracks) / 2)
      list(
        left = tracks[1:mid_point, ],
        right = tracks[(mid_point + 1):nrow(tracks), ]
      )
    } else {
      list(left = NULL, right = NULL)  # Return empty lists if "Track Name" is selected
    }
  })
  
  # Render the left column table
  output$track_table_left = renderTable({
    split_tracks()$left
  })
  
  # Render the right column table
  output$track_table_right = renderTable({
    split_tracks()$right
  })
}
# Run the application 

shinyApp(ui = ui, server = server)

